

-- -------------------------------------------------------------
--
-- Module: filter
-- Generated by MATLAB(R) 9.5 and Filter Design HDL Coder 3.1.4.
-- Generated on: 2024-02-13 00:09:05
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Ivan\Desktop\dfguiokjbn
-- TestBenchStimulus: impulse step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 11
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : u12,12 -> [0 1)
-- Input             : s12,12 -> [-5.000000e-01 5.000000e-01)
-- Filter Internals  : Specify Precision
--   Output          : s12,12 -> [-5.000000e-01 5.000000e-01)
--   Product         : s24,24 -> [-5.000000e-01 5.000000e-01)
--   Accumulator     : s27,24 -> [-4 4)
--   Round Mode      : convergent
--   Overflow Mode   : wrap
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(11 DOWNTO 0); -- sfix12_En12
         filter_out                      :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En12
         );

END filter;


----------------------------------------------------------------
--Module Architecture: filter
----------------------------------------------------------------
ARCHITECTURE rtl OF filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(11 DOWNTO 0); -- sfix12_En12
  -- Constants
  CONSTANT coeff1                         : unsigned(11 DOWNTO 0) := to_unsigned(317, 12); -- ufix12_En12
  CONSTANT coeff2                         : unsigned(11 DOWNTO 0) := to_unsigned(258, 12); -- ufix12_En12
  CONSTANT coeff3                         : unsigned(11 DOWNTO 0) := to_unsigned(332, 12); -- ufix12_En12
  CONSTANT coeff4                         : unsigned(11 DOWNTO 0) := to_unsigned(393, 12); -- ufix12_En12
  CONSTANT coeff5                         : unsigned(11 DOWNTO 0) := to_unsigned(433, 12); -- ufix12_En12
  CONSTANT coeff6                         : unsigned(11 DOWNTO 0) := to_unsigned(447, 12); -- ufix12_En12
  CONSTANT coeff7                         : unsigned(11 DOWNTO 0) := to_unsigned(433, 12); -- ufix12_En12
  CONSTANT coeff8                         : unsigned(11 DOWNTO 0) := to_unsigned(393, 12); -- ufix12_En12
  CONSTANT coeff9                         : unsigned(11 DOWNTO 0) := to_unsigned(332, 12); -- ufix12_En12
  CONSTANT coeff10                        : unsigned(11 DOWNTO 0) := to_unsigned(258, 12); -- ufix12_En12
  CONSTANT coeff11                        : unsigned(11 DOWNTO 0) := to_unsigned(317, 12); -- ufix12_En12

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 10); -- sfix12_En12
  SIGNAL product11                        : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp                         : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product10                        : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_1                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product9                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_2                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product8                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_3                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product7                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_4                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product6                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_5                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product5                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_6                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product4                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_7                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product3                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_8                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product2                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_9                       : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL product1_cast                    : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL product1                         : signed(23 DOWNTO 0); -- sfix24_En24
  SIGNAL mul_temp_10                      : signed(24 DOWNTO 0); -- sfix25_En24
  SIGNAL sum1                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp                         : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum2                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_1                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum3                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_2                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum4                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_3                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum5                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_4                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum6                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_5                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum7                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_6                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum8                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_7                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum9                             : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_8                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL sum10                            : signed(26 DOWNTO 0); -- sfix27_En24
  SIGNAL add_temp_9                       : signed(27 DOWNTO 0); -- sfix28_En24
  SIGNAL output_typeconvert               : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL output_register                  : signed(11 DOWNTO 0); -- sfix12_En12


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 10) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 10) <= delay_pipeline(0 TO 9);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(10) * signed( '0' & coeff11);
  product11 <= mul_temp(23 DOWNTO 0);

  mul_temp_1 <= delay_pipeline(9) * signed( '0' & coeff10);
  product10 <= mul_temp_1(23 DOWNTO 0);

  mul_temp_2 <= delay_pipeline(8) * signed( '0' & coeff9);
  product9 <= mul_temp_2(23 DOWNTO 0);

  mul_temp_3 <= delay_pipeline(7) * signed( '0' & coeff8);
  product8 <= mul_temp_3(23 DOWNTO 0);

  mul_temp_4 <= delay_pipeline(6) * signed( '0' & coeff7);
  product7 <= mul_temp_4(23 DOWNTO 0);

  mul_temp_5 <= delay_pipeline(5) * signed( '0' & coeff6);
  product6 <= mul_temp_5(23 DOWNTO 0);

  mul_temp_6 <= delay_pipeline(4) * signed( '0' & coeff5);
  product5 <= mul_temp_6(23 DOWNTO 0);

  mul_temp_7 <= delay_pipeline(3) * signed( '0' & coeff4);
  product4 <= mul_temp_7(23 DOWNTO 0);

  mul_temp_8 <= delay_pipeline(2) * signed( '0' & coeff3);
  product3 <= mul_temp_8(23 DOWNTO 0);

  mul_temp_9 <= delay_pipeline(1) * signed( '0' & coeff2);
  product2 <= mul_temp_9(23 DOWNTO 0);

  product1_cast <= resize(product1, 27);

  mul_temp_10 <= delay_pipeline(0) * signed( '0' & coeff1);
  product1 <= mul_temp_10(23 DOWNTO 0);

  add_temp <= resize(product1_cast, 28) + resize(product2, 28);
  sum1 <= add_temp(26 DOWNTO 0);

  add_temp_1 <= resize(sum1, 28) + resize(product3, 28);
  sum2 <= add_temp_1(26 DOWNTO 0);

  add_temp_2 <= resize(sum2, 28) + resize(product4, 28);
  sum3 <= add_temp_2(26 DOWNTO 0);

  add_temp_3 <= resize(sum3, 28) + resize(product5, 28);
  sum4 <= add_temp_3(26 DOWNTO 0);

  add_temp_4 <= resize(sum4, 28) + resize(product6, 28);
  sum5 <= add_temp_4(26 DOWNTO 0);

  add_temp_5 <= resize(sum5, 28) + resize(product7, 28);
  sum6 <= add_temp_5(26 DOWNTO 0);

  add_temp_6 <= resize(sum6, 28) + resize(product8, 28);
  sum7 <= add_temp_6(26 DOWNTO 0);

  add_temp_7 <= resize(sum7, 28) + resize(product9, 28);
  sum8 <= add_temp_7(26 DOWNTO 0);

  add_temp_8 <= resize(sum8, 28) + resize(product10, 28);
  sum9 <= add_temp_8(26 DOWNTO 0);

  add_temp_9 <= resize(sum9, 28) + resize(product11, 28);
  sum10 <= add_temp_9(26 DOWNTO 0);

  output_typeconvert <= resize(shift_right(sum10(23 DOWNTO 0) + ( "0" & (sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12) & NOT sum10(12))), 12), 12);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
